include "stl/stl_vector";
include "stl/stl_map";

struct Tape {
    tape: varray[int];
    pos: size;
}

fun get(self: Tape) => get(self.tape, self.pos);
proc inc(self: &Tape) = { set(*self.tape, *self.pos, get(*self) + 1); }
proc dec(self: &Tape) = { set(*self.tape, *self.pos, get(*self) - 1); }
proc advance(self: &Tape) = {
    self.pos <- *self.pos + 1;
    if (*self.pos).size >= (*self.tape).len call push_back(*self.tape, 0);
}
proc devance(self: &Tape) = { self.pos <- *self.pos - 1; }

ctor Tape() = {
    tape := varray[int] 1024.size;
    push_back(tape, 0);
    return Tape(tape, 0.size);
}

struct Program {
    bracket_map: Stl_Map[int,int]::stl_map;
    pcode: Stl_Vector[char]::stl_vector;
}

ctor Program(text: string) = {
    var bracket_map = #Stl_Map[int,int]::create;
    pcode := #Stl_Vector[char]::create;
    var leftstack = #list[int];
    var pc = 0;
    valid := "[]<>+-,.";
    for chr in text do
        match find(valid, chr) with
        | Some p =>
            push_back(pcode, chr);
            match p.int with
            | 0 => leftstack = pc + leftstack;
            | 1 =>
                insert(bracket_map, leftstack.head, pc);
                insert(bracket_map, pc, leftstack.head);
                leftstack = leftstack.tail;
            | _ => ;
            endmatch;
            pc++;
        | _ => ;
        endmatch;
    done
    return Program(bracket_map, pcode);
}

proc run(p: Program) = {
    var tape = #Tape;
    var pc = 0;
    while pc < p.pcode.len.int do
        match p.pcode.[pc.size].ord with
        | 43 => inc(&tape);
        | 45 => dec(&tape);
        | 60 => devance(&tape);
        | 62 => advance(&tape);
        | 91 => if get(tape) == 0 do pc = p.bracket_map.[pc]; done
        | 93 => if get(tape) != 0 do pc = p.bracket_map.[pc]; done
        | 46 => print $ char $ get(tape); stdout.fflush;
        endmatch;
        pc++;
    done
}

p := Program(load $ System::argv 1);
p.run;
